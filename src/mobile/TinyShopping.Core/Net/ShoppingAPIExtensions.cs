// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TinyShopping.Core.Net
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ShoppingAPI.
    /// </summary>
    public static partial class ShoppingAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<ShoppingList> ApiShoppingListGet(this IShoppingAPI operations, int id)
            {
                return operations.ApiShoppingListGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ShoppingList>> ApiShoppingListGetAsync(this IShoppingAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiShoppingListGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listData'>
            /// </param>
            public static void ApiShoppingListPost(this IShoppingAPI operations, ShoppingList listData = default(ShoppingList))
            {
                operations.ApiShoppingListPostAsync(listData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListPostAsync(this IShoppingAPI operations, ShoppingList listData = default(ShoppingList), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListPostWithHttpMessagesAsync(listData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ShoppingList ApiShoppingListByIdGet(this IShoppingAPI operations, int id)
            {
                return operations.ApiShoppingListByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShoppingList> ApiShoppingListByIdGetAsync(this IShoppingAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiShoppingListByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            public static void ApiShoppingListByIdPut(this IShoppingAPI operations, int id, ShoppingList listData = default(ShoppingList))
            {
                operations.ApiShoppingListByIdPutAsync(id, listData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListByIdPutAsync(this IShoppingAPI operations, int id, ShoppingList listData = default(ShoppingList), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListByIdPutWithHttpMessagesAsync(id, listData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiShoppingListByIdDelete(this IShoppingAPI operations, int id)
            {
                operations.ApiShoppingListByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListByIdDeleteAsync(this IShoppingAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            public static IList<Item> ApiShoppingListByListidItemsGet(this IShoppingAPI operations, int id, string listid)
            {
                return operations.ApiShoppingListByListidItemsGetAsync(id, listid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Item>> ApiShoppingListByListidItemsGetAsync(this IShoppingAPI operations, int id, string listid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiShoppingListByListidItemsGetWithHttpMessagesAsync(id, listid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            public static void ApiShoppingListByListidItemsPost(this IShoppingAPI operations, string listid, Item listData = default(Item))
            {
                operations.ApiShoppingListByListidItemsPostAsync(listid, listData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListByListidItemsPostAsync(this IShoppingAPI operations, string listid, Item listData = default(Item), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListByListidItemsPostWithHttpMessagesAsync(listid, listData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            public static Item ApiShoppingListByListidItemsByIdGet(this IShoppingAPI operations, int id, string listid)
            {
                return operations.ApiShoppingListByListidItemsByIdGetAsync(id, listid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> ApiShoppingListByListidItemsByIdGetAsync(this IShoppingAPI operations, int id, string listid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiShoppingListByListidItemsByIdGetWithHttpMessagesAsync(id, listid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            public static void ApiShoppingListByListidItemsByIdPut(this IShoppingAPI operations, int id, string listid, Item listData = default(Item))
            {
                operations.ApiShoppingListByListidItemsByIdPutAsync(id, listid, listData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='listData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListByListidItemsByIdPutAsync(this IShoppingAPI operations, int id, string listid, Item listData = default(Item), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListByListidItemsByIdPutWithHttpMessagesAsync(id, listid, listData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            public static void ApiShoppingListByListidItemsByIdDelete(this IShoppingAPI operations, int id, string listid)
            {
                operations.ApiShoppingListByListidItemsByIdDeleteAsync(id, listid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='listid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiShoppingListByListidItemsByIdDeleteAsync(this IShoppingAPI operations, int id, string listid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiShoppingListByListidItemsByIdDeleteWithHttpMessagesAsync(id, listid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}

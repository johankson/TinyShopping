// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TinyShopping.Core.Net.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Store
    {
        /// <summary>
        /// Initializes a new instance of the Store class.
        /// </summary>
        public Store()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Store class.
        /// </summary>
        public Store(int id, string chain, string notes, string name, double lat, double lng)
        {
            Id = id;
            Chain = chain;
            Notes = notes;
            Name = name;
            Lat = lat;
            Lng = lng;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chain")]
        public string Chain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lat")]
        public double Lat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lng")]
        public double Lng { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Chain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Chain");
            }
            if (Notes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Notes");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
